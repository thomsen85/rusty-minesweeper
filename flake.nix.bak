{
  description = "Rust Development Shell";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    rust-overlay.url = "github:oxalica/rust-overlay";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = {
    self,
    nixpkgs,
    rust-overlay,
    flake-utils,
    ...
  }:
    flake-utils.lib.eachDefaultSystem (
      system: let
        overlays = [(import rust-overlay)];
        pkgs = import nixpkgs {
          inherit system overlays;
          config.allowUnfree = true;
        };
        rust-bin =
          pkgs.rust-bin.selectLatestNightlyWith
          (toolchain:
            toolchain.default.override {
              targets = ["wasm32-unknown-unknown"];
              extensions = [
                "rust-src"
                "clippy"
                "rust-analyzer"
              ];
            });

        rust-dev-deps = with pkgs; [
          rust-analyzer
          rustfmt
          lldb
          renderdoc
        ];
        build-deps = with pkgs; [
          pkg-config
          mold
          clang
          makeWrapper
          lld
          fontconfig
        ];
        runtime-deps = with pkgs; [
          alsa-lib
          udev
          xorg.libX11
          xorg.libXcursor
          xorg.libXrandr
          xorg.libXi
          xorg.libxcb
          libxkbcommon
          libGL
          vulkan-loader
          vulkan-headers
          wayland
          trunk
        ];
        cuda-deps = with pkgs; [
          gcc
          stdenv.cc.cc
          stdenv.cc.cc.lib
          clang-tools
          bc

          cudatoolkit
          cudaPackages.cuda_cudart
        ];
      in {
        devShells.default = let
          all_deps =
            runtime-deps
            ++ build-deps
            ++ rust-dev-deps
            ++ cuda-deps
            ++ [rust-bin];
        in
          pkgs.mkShell {
            buildInputs = all_deps;

            # LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath all_deps;

            programs.nix-ld = {
              enable = true;
              libraries = [
                pkgs.cudatoolkit
              ];
            };

            shellHook = ''
              export CARGO_MANIFEST_DIR=$(pwd)
            '';
          };
      }
    );
}
